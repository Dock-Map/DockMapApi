openapi: 3.0.0
info:
  title: DockMap API Gateway
  description: API Gateway для DockMap приложения
  version: 1.0.0

servers:
  - url: https://your-domain.com
    description: Production server

paths:
  # API маршруты
  /api/{proxy+}:
    x-yc-apigateway-integration:
      type: serverless_containers
      container_id: YOUR_CONTAINER_ID  # Замените на реальный ID контейнера
      service_account_id: YOUR_SERVICE_ACCOUNT_ID  # Замените на реальный ID
    get:
      summary: Proxy all GET requests to container
      operationId: proxyGet
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          
    post:
      summary: Proxy all POST requests to container
      operationId: proxyPost
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Success
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          
    put:
      summary: Proxy all PUT requests to container
      operationId: proxyPut
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          
    delete:
      summary: Proxy all DELETE requests to container
      operationId: proxyDelete
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  # Health check endpoint
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      x-yc-apigateway-integration:
        type: serverless_containers
        container_id: YOUR_CONTAINER_ID
        service_account_id: YOUR_SERVICE_ACCOUNT_ID
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time

  # CORS preflight для всех маршрутов
  /{proxy+}:
    options:
      summary: CORS preflight
      operationId: corsPreFlight
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      x-yc-apigateway-integration:
        type: mock
        http_code: 200
        http_headers:
          Access-Control-Allow-Origin: '*'
          Access-Control-Allow-Methods: 'GET,POST,PUT,DELETE,OPTIONS'
          Access-Control-Allow-Headers: 'Content-Type,Authorization,X-Requested-With'
          Access-Control-Max-Age: '86400'
        content:
          application/json: '{"message": "CORS preflight"}'
      responses:
        '200':
          description: CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string

# Настройки CORS для всех маршрутов
x-yc-apigateway-cors:
  origin: '*'
  methods: 'GET,POST,PUT,DELETE,OPTIONS'
  headers: 'Content-Type,Authorization,X-Requested-With'
  credentials: false

# Настройки авторизации (опционально)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 401
              message:
                type: string
                example: "Unauthorized"
              error:
                type: string
                example: "Unauthorized"
