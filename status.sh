#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Yandex Cloud

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
header() { echo -e "${BLUE}=== $1 ===${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI
if ! command -v yc &> /dev/null; then
    error "Yandex Cloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REGISTRY_NAME="dockmap-registry"
CONTAINER_NAME="dockmap-api"
POSTGRES_CLUSTER="dockmap-postgres"
SERVICE_ACCOUNT_NAME="dockmap-service-account"
FOLDER_ID=$(yc config get folder-id)

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DockMap API"
echo "üìÅ Folder ID: $FOLDER_ID"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Container Registry
check_registry() {
    header "Container Registry"
    
    if yc container registry get $REGISTRY_NAME &>/dev/null; then
        REGISTRY_ID=$(yc container registry get $REGISTRY_NAME --format json | jq -r '.id')
        log "‚úÖ Registry —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $REGISTRY_NAME ($REGISTRY_ID)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        IMAGES=$(yc container image list --registry-id $REGISTRY_ID --format json)
        IMAGE_COUNT=$(echo "$IMAGES" | jq length)
        
        if [[ $IMAGE_COUNT -gt 0 ]]; then
            log "üì¶ –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–∑–æ–≤: $IMAGE_COUNT"
            echo "$IMAGES" | jq -r '.[] | "  - \(.name):\(.tag) (—Å–æ–∑–¥–∞–Ω: \(.created_at))"'
        else
            warn "üì¶ –û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        error "‚ùå Registry –Ω–µ –Ω–∞–π–¥–µ–Ω: $REGISTRY_NAME"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Service Account
check_service_account() {
    header "Service Account"
    
    if yc iam service-account get $SERVICE_ACCOUNT_NAME &>/dev/null; then
        SA_ID=$(yc iam service-account get $SERVICE_ACCOUNT_NAME --format json | jq -r '.id')
        log "‚úÖ Service Account —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $SERVICE_ACCOUNT_NAME ($SA_ID)"
    else
        error "‚ùå Service Account –Ω–µ –Ω–∞–π–¥–µ–Ω: $SERVICE_ACCOUNT_NAME"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Serverless Container
check_container() {
    header "Serverless Container"
    
    if yc serverless container get $CONTAINER_NAME &>/dev/null; then
        CONTAINER_INFO=$(yc serverless container get $CONTAINER_NAME --format json)
        CONTAINER_ID=$(echo "$CONTAINER_INFO" | jq -r '.id')
        CONTAINER_URL=$(echo "$CONTAINER_INFO" | jq -r '.url')
        
        log "‚úÖ Container —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $CONTAINER_NAME ($CONTAINER_ID)"
        log "üåê URL: $CONTAINER_URL"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≤–∏–∑–∏–∏
        REVISION_INFO=$(yc serverless container revision list --container-name $CONTAINER_NAME --format json | head -1)
        if [[ "$REVISION_INFO" != "[]" ]]; then
            REVISION_ID=$(echo "$REVISION_INFO" | jq -r '.[0].id')
            REVISION_STATUS=$(echo "$REVISION_INFO" | jq -r '.[0].status')
            REVISION_IMAGE=$(echo "$REVISION_INFO" | jq -r '.[0].image.image_url')
            CREATED_AT=$(echo "$REVISION_INFO" | jq -r '.[0].created_at')
            
            log "üìã –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: $REVISION_ID"
            log "üìä –°—Ç–∞—Ç—É—Å: $REVISION_STATUS"
            log "üñºÔ∏è –û–±—Ä–∞–∑: $REVISION_IMAGE"
            log "üìÖ –°–æ–∑–¥–∞–Ω–∞: $CREATED_AT"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if [[ -n "$CONTAINER_URL" && "$CONTAINER_URL" != "null" ]]; then
                echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API... "
                if curl -s --max-time 10 "$CONTAINER_URL/health" >/dev/null 2>&1; then
                    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
                fi
            fi
        else
            warn "‚ö†Ô∏è –†–µ–≤–∏–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        error "‚ùå Container –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONTAINER_NAME"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL
check_postgres() {
    header "PostgreSQL Cluster"
    
    if yc managed-postgresql cluster get $POSTGRES_CLUSTER &>/dev/null; then
        CLUSTER_INFO=$(yc managed-postgresql cluster get $POSTGRES_CLUSTER --format json)
        CLUSTER_STATUS=$(echo "$CLUSTER_INFO" | jq -r '.status')
        CLUSTER_HEALTH=$(echo "$CLUSTER_INFO" | jq -r '.health')
        
        log "‚úÖ Cluster —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $POSTGRES_CLUSTER"
        log "üìä –°—Ç–∞—Ç—É—Å: $CLUSTER_STATUS"
        log "üíä –ó–¥–æ—Ä–æ–≤—å–µ: $CLUSTER_HEALTH"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–∞—Ö
        HOSTS=$(echo "$CLUSTER_INFO" | jq -r '.config.hosts[] | "  - \(.zone_id): \(.name)"')
        if [[ -n "$HOSTS" ]]; then
            log "üñ•Ô∏è –•–æ—Å—Ç—ã:"
            echo "$HOSTS"
        fi
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        DBS=$(yc managed-postgresql database list --cluster-name $POSTGRES_CLUSTER --format json)
        DB_COUNT=$(echo "$DBS" | jq length)
        if [[ $DB_COUNT -gt 0 ]]; then
            log "üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ($DB_COUNT):"
            echo "$DBS" | jq -r '.[] | "  - \(.name) (–≤–ª–∞–¥–µ–ª–µ—Ü: \(.owner))"'
        fi
    else
        warn "‚ö†Ô∏è PostgreSQL cluster –Ω–µ –Ω–∞–π–¥–µ–Ω: $POSTGRES_CLUSTER"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Object Storage
check_storage() {
    header "Object Storage"
    
    BUCKETS=$(yc storage bucket list --format json 2>/dev/null || echo "[]")
    BUCKET_COUNT=$(echo "$BUCKETS" | jq length)
    
    if [[ $BUCKET_COUNT -gt 0 ]]; then
        log "‚úÖ –ù–∞–π–¥–µ–Ω–æ buckets: $BUCKET_COUNT"
        echo "$BUCKETS" | jq -r '.[] | "  - \(.name) (—Å–æ–∑–¥–∞–Ω: \(.creation_date))"'
    else
        warn "‚ö†Ô∏è Object Storage buckets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    header "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    
    if yc serverless container get $CONTAINER_NAME &>/dev/null; then
        log "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:"
        yc serverless container revision logs \
            --container-name $CONTAINER_NAME \
            --lines 20 \
            --follow=false 2>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"
    else
        warn "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"
    fi
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ—Ç—Ä–∏–∫
show_metrics() {
    header "–ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏"
    
    log "üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:"
    echo "  - Serverless Container: ~1000‚ÇΩ"
    echo "  - PostgreSQL (s2.micro): ~3000‚ÇΩ"
    echo "  - Container Registry: ~150‚ÇΩ"
    echo "  - Object Storage: ~30‚ÇΩ"
    echo "  üìä –ò—Ç–æ–≥–æ: ~4200‚ÇΩ"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
case "${1:-}" in
    "registry")
        check_registry
        ;;
    "container")
        check_container
        ;;
    "postgres"|"db")
        check_postgres
        ;;
    "storage")
        check_storage
        ;;
    "logs")
        show_logs
        ;;
    "metrics")
        show_metrics
        ;;
    "all"|"")
        check_registry
        check_service_account
        check_container
        check_postgres
        check_storage
        show_metrics
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [registry|container|postgres|storage|logs|metrics|all]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  registry   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Container Registry"
        echo "  container  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Serverless Container"
        echo "  postgres   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å PostgreSQL cluster"
        echo "  storage    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Object Storage"
        echo "  logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "  metrics    - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        echo "  all        - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        exit 1
        ;;
esac

echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
