#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DockMap API –≤ Yandex Cloud
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Yandex Cloud CLI (yc)

set -e  # –í—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v yc &> /dev/null; then
        error "Yandex Cloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–∑ https://cloud.yandex.ru/docs/cli/quickstart"
    fi
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if [[ ! -f ".env.production" ]]; then
        error "–§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ production.env.template –≤ .env.production –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è"
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
setup_variables() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π folder-id
    FOLDER_ID=$(yc config get folder-id)
    if [[ -z "$FOLDER_ID" ]]; then
        error "Folder ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: yc config set folder-id YOUR_FOLDER_ID"
    fi
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    REGISTRY_NAME="dockmap-registry"
    CONTAINER_NAME="dockmap-api"
    IMAGE_NAME="dockmap-api"
    SERVICE_ACCOUNT_NAME="dockmap-service-account"
    
    # –ü–æ–ª—É—á–∞–µ–º registry ID
    REGISTRY_ID=$(yc container registry get $REGISTRY_NAME --format json 2>/dev/null | jq -r '.id' || echo "")
    
    log "Folder ID: $FOLDER_ID"
    log "Registry: $REGISTRY_NAME"
    log "Container: $CONTAINER_NAME"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Container Registry
create_registry() {
    if [[ -z "$REGISTRY_ID" ]]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ Container Registry..."
        yc container registry create --name $REGISTRY_NAME
        REGISTRY_ID=$(yc container registry get $REGISTRY_NAME --format json | jq -r '.id')
        log "Registry —Å–æ–∑–¥–∞–Ω: $REGISTRY_ID"
    else
        log "Registry —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $REGISTRY_ID"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ Service Account
create_service_account() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ Service Account..."
    
    SA_ID=$(yc iam service-account get $SERVICE_ACCOUNT_NAME --format json 2>/dev/null | jq -r '.id' || echo "")
    
    if [[ -z "$SA_ID" ]]; then
        yc iam service-account create --name $SERVICE_ACCOUNT_NAME --description "Service account for DockMap"
        SA_ID=$(yc iam service-account get $SERVICE_ACCOUNT_NAME --format json | jq -r '.id')
        log "Service Account —Å–æ–∑–¥–∞–Ω: $SA_ID"
    else
        log "Service Account —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $SA_ID"
    fi
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    log "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π Service Account..."
    yc resource-manager folder add-access-binding $FOLDER_ID \
        --role container-registry.images.puller \
        --subject serviceAccount:$SA_ID || true
        
    yc resource-manager folder add-access-binding $FOLDER_ID \
        --role serverless-containers.invoker \
        --subject serviceAccount:$SA_ID || true
}

# –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞
build_and_push_image() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Container Registry
    yc container registry configure-docker
    
    # –¢–µ–≥ –¥–ª—è –æ–±—Ä–∞–∑–∞
    IMAGE_TAG="cr.yandex/$REGISTRY_ID/$IMAGE_NAME:latest"
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
    docker build -t $IMAGE_TAG .
    
    log "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞ –≤ Container Registry..."
    docker push $IMAGE_TAG
    
    log "–û–±—Ä–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: $IMAGE_TAG"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Serverless Container
create_serverless_container() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ Serverless Container..."
    
    IMAGE_TAG="cr.yandex/$REGISTRY_ID/$IMAGE_NAME:latest"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    CONTAINER_ID=$(yc serverless container get $CONTAINER_NAME --format json 2>/dev/null | jq -r '.id' || echo "")
    
    if [[ -z "$CONTAINER_ID" ]]; then
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        yc serverless container create --name $CONTAINER_NAME
        CONTAINER_ID=$(yc serverless container get $CONTAINER_NAME --format json | jq -r '.id')
        log "Serverless Container —Å–æ–∑–¥–∞–Ω: $CONTAINER_ID"
    else
        log "Serverless Container —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $CONTAINER_ID"
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–∏–∑–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤–∏–∑–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    yc serverless container revision deploy \
        --container-name $CONTAINER_NAME \
        --image $IMAGE_TAG \
        --cores 1 \
        --memory 1GB \
        --concurrency 16 \
        --execution-timeout 60s \
        --service-account-id $SA_ID \
        --environment NODE_ENV=production,PORT=3000
        
    log "–†–µ–≤–∏–∑–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
get_container_url() {
    log "–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    
    CONTAINER_URL=$(yc serverless container get $CONTAINER_NAME --format json | jq -r '.url')
    
    if [[ "$CONTAINER_URL" != "null" && -n "$CONTAINER_URL" ]]; then
        log "URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $CONTAINER_URL"
        echo ""
        echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        echo "üìç URL API: $CONTAINER_URL"
        echo "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: $CONTAINER_URL/api"
        echo ""
    else
        warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DockMap API –≤ Yandex Cloud..."
    
    check_dependencies
    setup_variables
    create_registry
    create_service_account
    build_and_push_image
    create_serverless_container
    get_container_url
    
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "registry")
        setup_variables
        create_registry
        ;;
    "build")
        setup_variables
        build_and_push_image
        ;;
    "deploy")
        setup_variables
        create_serverless_container
        ;;
    "")
        main
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [registry|build|deploy]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  registry  - –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ Container Registry"
        echo "  build     - –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑"
        echo "  deploy    - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å Serverless Container"
        echo "  (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        exit 1
        ;;
esac
