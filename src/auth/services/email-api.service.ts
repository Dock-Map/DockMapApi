import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { MailerSend, EmailParams, Sender, Recipient } from 'mailersend';
import axios from 'axios';

@Injectable()
export class EmailApiService {
  constructor(private configService: ConfigService) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ MailerSend API
   */
  async sendResetPasswordCode(email: string, code: string): Promise<boolean> {
    console.log(`[MAILERSEND API] Sending email to: ${email}`);

    // –ü—Ä–æ–±—É–µ–º MailerSend SDK
    try {
      console.log(`[MAILERSEND SDK] Trying MailerSend SDK...`);
      const result = await this.sendViaMailerSend(email, code);
      if (result) {
        console.log(`[MAILERSEND SDK] ‚úÖ Email sent successfully`);
        return true;
      }
    } catch (error) {
      console.error(`[MAILERSEND SDK] Failed:`, error);
      console.error(
        `[MAILERSEND SDK] Error message:`,
        error?.message || 'No error message',
      );
      console.error(
        `[MAILERSEND SDK] Error details:`,
        JSON.stringify(error, null, 2),
      );
    }

    // Fallback –∫ –ø—Ä—è–º–æ–º—É HTTP API
    try {
      console.log(`[MAILERSEND HTTP] Trying direct HTTP API...`);
      const httpResult = await this.sendViaMailerSendHTTP(email, code);
      if (httpResult) {
        console.log(`[MAILERSEND HTTP] ‚úÖ Email sent via HTTP API`);
        return true;
      }
    } catch (error) {
      console.error(`[MAILERSEND HTTP] Failed:`, error?.message || error);
    }

    console.log(`[MAILERSEND API] üìß Reset code for testing: ${code}`);
    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è UX
  }

  private async sendViaMailerSend(
    email: string,
    code: string,
  ): Promise<boolean> {
    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
    const mailerSendApiKey =
      this.configService.get<string>('MAILERSEND_API_KEY') ||
      'mlsn.ce978212dc34f30cda1fe6bec4d069539a3206709a51a551bad362e59ec67c0d';

    console.log(
      `[MAILERSEND] Using API key: ${mailerSendApiKey.substring(0, 15)}...`,
    );

    const mailerSend = new MailerSend({
      apiKey: mailerSendApiKey,
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—à –¥–æ–º–µ–Ω
    let fromEmail =
      this.configService.get<string>('MAILERSEND_FROM_EMAIL') ||
      'hello@test-pzkmgq7656vl059v.mlsender.net';

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (!fromEmail.includes('@')) {
      fromEmail = `hello@${fromEmail}`;
    } else if (
      !fromEmail.startsWith('hello@') &&
      fromEmail.includes('test-pzkmgq7656vl059v.mlsender.net')
    ) {
      fromEmail = 'hello@test-pzkmgq7656vl059v.mlsender.net';
    }

    const fromName =
      this.configService.get<string>('MAILERSEND_FROM_NAME') || 'DockMap';

    console.log(`[MAILERSEND] Sending from: ${fromEmail}`);

    // Trial –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminEmail =
      this.configService.get<string>('MAILERSEND_ADMIN_EMAIL') ||
      'kozago.gor@gmail.com'; // Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ MailerSend –∞–∫–∫–∞—É–Ω—Ç–∞

    const actualRecipient = email === adminEmail ? email : adminEmail;

    if (email !== adminEmail) {
      console.log(
        `[MAILERSEND] üîÑ Redirecting email from ${email} to admin ${adminEmail} (Trial limitation)`,
      );
    }

    const sentFrom = new Sender(fromEmail, fromName);
    const recipients = [new Recipient(actualRecipient, 'User')];

    const emailParams = new EmailParams()
      .setFrom(sentFrom)
      .setTo(recipients)
      .setSubject(
        `–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è DockMap${email !== adminEmail ? ` (–¥–ª—è ${email})` : ''}`,
      )
      .setHtml(
        this.getEmailTemplate(code, email !== adminEmail ? email : undefined),
      )
      .setText(`–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è DockMap: ${code}`);

    console.log(`[MAILERSEND] Sending email to: ${email}`);

    const result = await mailerSend.email.send(emailParams);

    console.log(`[MAILERSEND] Raw result:`, JSON.stringify(result, null, 2));

    if (result) {
      console.log(`[MAILERSEND] ‚úÖ Email sent successfully`);
      return true;
    } else {
      throw new Error('MailerSend returned no result');
    }
  }

  private async sendViaMailerSendHTTP(
    email: string,
    code: string,
  ): Promise<boolean> {
    const mailerSendApiKey =
      this.configService.get<string>('MAILERSEND_API_KEY') ||
      'mlsn.ce978212dc34f30cda1fe6bec4d069539a3206709a51a551bad362e59ec67c0d';

    console.log(
      `[MAILERSEND HTTP] Using API key: ${mailerSendApiKey.substring(0, 15)}...`,
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—à –¥–æ–º–µ–Ω
    let fromEmail =
      this.configService.get<string>('MAILERSEND_FROM_EMAIL') ||
      'hello@test-pzkmgq7656vl059v.mlsender.net';

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (!fromEmail.includes('@')) {
      fromEmail = `hello@${fromEmail}`;
    } else if (
      !fromEmail.startsWith('hello@') &&
      fromEmail.includes('test-pzkmgq7656vl059v.mlsender.net')
    ) {
      fromEmail = 'hello@test-pzkmgq7656vl059v.mlsender.net';
    }

    const fromName =
      this.configService.get<string>('MAILERSEND_FROM_NAME') || 'DockMap';

    console.log(`[MAILERSEND HTTP] Sending from: ${fromEmail}`);

    // Trial –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminEmail =
      this.configService.get<string>('MAILERSEND_ADMIN_EMAIL') ||
      'kozago.gor@gmail.com'; // Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ MailerSend –∞–∫–∫–∞—É–Ω—Ç–∞

    const actualRecipient = email === adminEmail ? email : adminEmail;

    if (email !== adminEmail) {
      console.log(
        `[MAILERSEND HTTP] üîÑ Redirecting email from ${email} to admin ${adminEmail} (Trial limitation)`,
      );
    }

    const payload = {
      from: {
        email: fromEmail,
        name: fromName,
      },
      to: [
        {
          email: actualRecipient,
          name: 'User',
        },
      ],
      subject: `–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è DockMap${email !== adminEmail ? ` (–¥–ª—è ${email})` : ''}`,
      html: this.getEmailTemplate(
        code,
        email !== adminEmail ? email : undefined,
      ),
      text: `–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è DockMap: ${code}`,
    };

    console.log(`[MAILERSEND HTTP] Payload:`, JSON.stringify(payload, null, 2));

    const response = await axios.post(
      'https://api.mailersend.com/v1/email',
      payload,
      {
        headers: {
          Authorization: `Bearer ${mailerSendApiKey}`,
          'Content-Type': 'application/json',
        },
        timeout: 15000,
      },
    );

    console.log(`[MAILERSEND HTTP] Response status:`, response.status);
    console.log(
      `[MAILERSEND HTTP] Response data:`,
      JSON.stringify(response.data, null, 2),
    );

    if (response.status === 202) {
      console.log(`[MAILERSEND HTTP] ‚úÖ Email sent successfully`);
      return true;
    } else {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
  }

  private getEmailTemplate(code: string, originalEmail?: string): string {
    const redirectNote = originalEmail
      ? `<div style="background: #e0f2fe; padding: 15px; border-radius: 6px; border-left: 4px solid #0288d1; margin: 20px 0;">
        <p style="color: #01579b; margin: 0; font-size: 14px;">
          üìß <strong>Trial —Ä–µ–∂–∏–º:</strong> –≠—Ç–æ –ø–∏—Å—å–º–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–ª–æ—Å—å –¥–ª—è ${originalEmail}, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Trial –∞–∫–∫–∞—É–Ω—Ç–∞ MailerSend.
        </p>
      </div>`
      : '';

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #2563eb; margin: 0;">DockMap</h1>
        </div>
        
        <div style="background: #f8fafc; padding: 30px; border-radius: 10px; border: 1px solid #e2e8f0;">
          <h2 style="color: #1e293b; margin-top: 0;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
          
          ${redirectNote}
          
          <p style="color: #475569; font-size: 16px; line-height: 1.5;">
            –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ DockMap.
          </p>
          
          <div style="background: white; padding: 20px; margin: 20px 0; border-radius: 8px; text-align: center; border: 2px dashed #cbd5e1;">
            <p style="color: #64748b; margin: 0 0 10px 0; font-size: 14px;">–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            <div style="font-size: 32px; font-weight: bold; color: #2563eb; letter-spacing: 4px; font-family: monospace;">
              ${code}
            </div>
          </div>
          
          <div style="background: #fef3c7; padding: 15px; border-radius: 6px; border-left: 4px solid #f59e0b; margin: 20px 0;">
            <p style="color: #92400e; margin: 0; font-size: 14px;">
              ‚ö†Ô∏è <strong>–í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            </p>
          </div>
          
          <p style="color: #475569; font-size: 14px; line-height: 1.5; margin-bottom: 0;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
        
        <div style="text-align: center; margin-top: 30px; color: #94a3b8; font-size: 12px;">
          <p>¬© 2024 DockMap. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `;
  }
}
