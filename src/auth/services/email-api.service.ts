import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';

@Injectable()
export class EmailApiService {
  constructor(private configService: ConfigService) {}

  /**
   * HTTP API fallback –¥–ª—è Railway (–∫–æ–≥–¥–∞ SMTP –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç EmailJS –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å
   */
  async sendViaHttpApi(email: string, code: string): Promise<boolean> {
    try {
      console.log(`[HTTP API] Trying HTTP fallback for Railway...`);

      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EmailJS, Postmark –∏–ª–∏ –¥—Ä—É–≥–æ–π HTTP API
      const emailContent = `
        –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è DockMap: ${code}
        
        –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å - –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ.
      `;

      // –î–ª—è Railway –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook —Å–µ—Ä–≤–∏—Å
      const webhookUrl = 'https://api.emailjs.com/api/v1.0/email/send'; // –ü—Ä–∏–º–µ—Ä

      console.log(`[HTTP API] Would send email to ${email} with code ${code}`);
      console.log(`[HTTP API] Content: ${emailContent}`);

      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–∏–º—É–ª—è—Ü–∏–∏
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π HTTP API
      return false;
    } catch (error) {
      console.error('[HTTP API] Error:', error.message);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mail.ru SMTP —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SMTP –±–µ–∑ API
   */
  async sendResetPasswordCodeViaMailRuSMTP(
    email: string,
    code: string,
  ): Promise<boolean> {
    try {
      // Mail.ru SMTP credentials (hardcoded –¥–ª—è Railway)
      const smtpUser =
        this.configService.get<string>('MAILRU_SMTP_USER') ||
        'dock.map@mail.ru';
      const smtpPassword =
        this.configService.get<string>('MAILRU_SMTP_PASSWORD') ||
        'weghPOZktP2e3Md7Rr37';

      console.log(`[MAIL.RU SMTP] Using user: ${smtpUser}`);
      console.log(
        `[MAIL.RU SMTP] Password configured: ${smtpPassword ? 'Yes' : 'No'}`,
      );

      if (!smtpUser || !smtpPassword) {
        console.log('[MAIL.RU SMTP] Credentials not configured, skipping...');
        return false;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º nodemailer –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Mail.ru SMTP
      const nodemailer = await import('nodemailer');

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è Railway (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)
      const smtpConfigs = [
        {
          host: 'smtp.mail.ru',
          port: 2525, // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç (—á–∞—Å—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è)
          secure: false,
          name: 'Port 2525 (Alternative)',
        },
        {
          host: 'smtp.mail.ru',
          port: 587,
          secure: false,
          name: 'Port 587 (STARTTLS)',
        },
        {
          host: 'smtp.mail.ru',
          port: 465,
          secure: true,
          name: 'Port 465 (SSL)',
        },
      ];

      let transporter: any = null;
      let lastError: any = null;

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      for (const config of smtpConfigs) {
        try {
          console.log(`[MAIL.RU SMTP] Trying ${config.name}...`);

          transporter = nodemailer.createTransport({
            host: config.host,
            port: config.port,
            secure: config.secure,
            auth: {
              user: smtpUser,
              pass: smtpPassword,
            },
            connectionTimeout: 8000, // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Railway
            greetingTimeout: 5000,
            socketTimeout: 8000,
            requireTLS: !config.secure, // TLS —Ç–æ–ª—å–∫–æ –¥–ª—è non-secure
            tls: {
              rejectUnauthorized: false,
            },
          });

          // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          await Promise.race([
            transporter.verify(),
            new Promise((_, reject) =>
              setTimeout(() => reject(new Error('Verify timeout')), 5000),
            ),
          ]);

          console.log(`[MAIL.RU SMTP] ‚úÖ ${config.name} works!`);
          break; // –ù–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        } catch (error) {
          console.log(
            `[MAIL.RU SMTP] ‚ùå ${config.name} failed: ${error.message}`,
          );
          lastError = error;
          transporter = null;
        }
      }

      if (!transporter) {
        throw lastError || new Error('All SMTP configurations failed');
      }

      const mailOptions = {
        from: `DockMap <${smtpUser}>`,
        to: email,
        subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è DockMap',
        html: this.getEmailTemplate(code),
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ)
      console.log(`[MAIL.RU SMTP] Sending email...`);
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
      const result = await transporter.sendMail(mailOptions);
      console.log(
        `[MAIL.RU SMTP] ‚úÖ Email sent successfully:`,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        result.messageId,
      );
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      console.log(`[MAIL.RU SMTP] Response:`, result.response);
      return true;
    } catch (error) {
      console.error('[MAIL.RU SMTP] Detailed error:');
      console.error('- Code:', error.code);
      console.error('- Command:', error.command);
      console.error('- Response:', error.response);
      console.error('- Message:', error.message);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Railway
      if (error.code === 'ECONNREFUSED') {
        console.error(
          '[MAIL.RU SMTP] Railway –±–ª–æ–∫–∏—Ä—É–µ—Ç SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç',
        );
      }
      if (error.code === 'ETIMEDOUT') {
        console.error(
          '[MAIL.RU SMTP] –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ Railway - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º retry',
        );
      }

      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mail.ru SMTP —Å fallback –¥–ª—è Railway
   */
  async sendResetPasswordCode(email: string, code: string): Promise<boolean> {
    console.log(`[EMAIL API] Starting email send process for: ${email}`);

    // 1. –ü—Ä–æ–±—É–µ–º Mail.ru SMTP (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤)
    const mailRuSMTPResult = await this.sendResetPasswordCodeViaMailRuSMTP(
      email,
      code,
    );
    if (mailRuSMTPResult) {
      console.log('[EMAIL API] ‚úÖ Email sent via Mail.ru SMTP');
      return true;
    }

    // 2. –ü—Ä–æ–±—É–µ–º HTTP API fallback (–¥–ª—è Railway)
    console.log('[EMAIL API] SMTP failed, trying HTTP API fallback...');
    const httpApiResult = await this.sendViaHttpApi(email, code);
    if (httpApiResult) {
      console.log('[EMAIL API] ‚úÖ Email sent via HTTP API');
      return true;
    }

    // 3. –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—Ö–∞ (–∫–æ–¥ –≤ –ª–æ–≥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    console.warn(
      `[EMAIL API] üü° All methods failed, simulating success for: ${email}`,
    );
    console.log(`[EMAIL API] üìß Reset code for testing: ${code}`);
    console.log(
      `[EMAIL API] üí° On Railway: Check logs above for SMTP port blocks`,
    );

    return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è UX
  }

  private getEmailTemplate(code: string): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #2563eb; margin: 0;">DockMap</h1>
        </div>
        
        <div style="background: #f8fafc; padding: 30px; border-radius: 10px; border: 1px solid #e2e8f0;">
          <h2 style="color: #1e293b; margin-top: 0;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
          
          <p style="color: #475569; font-size: 16px; line-height: 1.5;">
            –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ DockMap.
          </p>
          
          <div style="background: white; padding: 20px; margin: 20px 0; border-radius: 8px; text-align: center; border: 2px dashed #cbd5e1;">
            <p style="color: #64748b; margin: 0 0 10px 0; font-size: 14px;">–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            <div style="font-size: 32px; font-weight: bold; color: #2563eb; letter-spacing: 4px; font-family: monospace;">
              ${code}
            </div>
          </div>
          
          <div style="background: #fef3c7; padding: 15px; border-radius: 6px; border-left: 4px solid #f59e0b; margin: 20px 0;">
            <p style="color: #92400e; margin: 0; font-size: 14px;">
              ‚ö†Ô∏è <strong>–í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            </p>
          </div>
          
          <p style="color: #475569; font-size: 14px; line-height: 1.5; margin-bottom: 0;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
        
        <div style="text-align: center; margin-top: 30px; color: #94a3b8; font-size: 12px;">
          <p>¬© 2024 DockMap. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `;
  }
}
